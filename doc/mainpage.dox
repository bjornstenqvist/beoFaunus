namespace Faunus {

/*!
@page inputoutput Input and output
@tableofcontents

# JSON input and output

Faunus uses JSON files for input and, in many cases, also for output.
It is a structured format that can be easily read my most programming
languages such as Python, C++ etc. Here's an example of an input file
for melted NaCl for the `bulk.cpp` program:

~~~{.java}
{
    "atomlist" : {
        "Na" : { "q": 1.0, "sigma":3.33, "eps":0.01158968, "dp":1.0 },
        "Cl" : { "q":-1.0, "sigma":4.40, "eps":0.4184,     "dp":1.0 }
    },
    "moleculelist" : { 
        "salt" : { "atoms":"Na Cl", "atomic":true, "Ninit":512 }
    },
    "moves" : {
        "atomtranslate" : { "salt" : { "peratom":true } }
    },
    "energy" : {
        "nonbonded" : { "epsr": 80.0, "cutoff":14.0 }
    },
    "analysis" : {
        "xtcfile" : { "file": "traj.xtc", "nstep":20 },
        "pqrfile" : { "file": "confout.pqr" },
        "atomrdf" : { "nstep":10, "pairs" :
              [
                  { "name1":"Na", "name2":"Cl", "dim":3, "dr":0.1, "file":"rdf_nacl.dat"},
                  { "name1":"Na", "name2":"Na", "dim":3, "dr":0.1, "file":"rdf_nana.dat"}
              ]
          }
      },
    "system" : {
        "temperature" : 1100,
        "geometry" : { "length":40 }
    }
}
~~~

Each section is read by a constructor of a C++ class, called
from the main program (`bulk.cpp`):

 Section       |   Class                        |  Control  |  Notes
-------------- | ------------------------------ | --------- | --------------------
`analysis`     |  `Analysis::CombinedAnalysis`  |  Dynamic  | |
`atomlist`     |  `AtomData`                    |  Dynamic  | Initiated by `Space`
`moleculelist` |  `MoleculeData`                |  Dynamic  | Initiated by `Space`
`mcloop`       |  `MCLoop`                      |  Dynamic  | |
`energy`       |  `Energy::Energybase`          |  Static   | |
`geometry`     |  `Geometry`                    |  Static   | Initiated by `Space`

Here _static_ means that the Hamiltonian (derived from `Energy::Energybase`) is defined
in your main program and only the input for that particular hamiltonian can be given in
the input. In contrast, all analysis functions, for example, can be added _dynamically_ via input.
Likewise you cannot change the geometry (cube, sphere, cylinder etc.) from input, but will need
to recompile.


## Working with YAML files

JSON is a subset of the more general format YAML and the latter is
somewhat more human readable. To convert between JSON and YAML we
provide a script, `scripts/yason.py`, that can pass
YAML (and JSON) input files,

    $ scripts/yason.py < input.yml | ./myprogram

where we assume that `myprogram` reads JSON from standard input,

    Tmjson in;
    std::cin >> in;

The script can also be used oppositely to pretty print JSON as YAML,

    $ yason.py move_out.json

Example YAML file from a Monte Carlo move class:

~~~{.yaml}
moves:
    Single Particle Translation:
        acceptance: 0.637203358890106
        atoms:
            Na: {acceptance: 63.7203358890106, dp: 1, mean displacement: 0.385081517298659}
        dir: [1, 1, 1]
        moves/particle: 20086
        relative time: 0.483203542345245
        trials: 602580
~~~

which is less verbose than the corresponding JSON file,

~~~{.java}
{
    "moves" {
        "Single Particle Translation": {
            "acceptance": 0.637203358890106,
            "atoms": {
                "Na": {
                    "acceptance": 63.7203358890106,
                    "dp": 1,
                    "mean displacement": 0.385081517298659
                }
            },
            "dir": [ 1, 1, 1 ],
            "moves/particle": 20086,
            "relative time": 0.483203542345245,
            "trials": 602580
        },
    }
}
~~~

## Reading JSON files

### Python

~~~{.py}
import json
with open('move_out.json') as f:
    data = json.load(f)
    print( data['moves']['Single Particle Translation']['trials'] ) # --> 602580
~~~

### C++11

~~~{.cpp}
#include <iostream>
#include <json.hpp> // https://github.com/nlohmann/json

int main() {
    nlohmann::json j;
    j << std::cin;
    std::cout << j["moves"]["Single Particle Translation"]["trials"]; // --> 602580
}
~~~


## The VIM editor

For simple JSON syntax highlighting in the VIM editor, add
the following to `~/.vimrc`:

    au! BufRead,BufNewFile *.json set filetype=javascript

*/

/*!
@page video Video Tutorial

@htmlonly
<iframe src="https://docs.google.com/file/d/0BzpLUBrTxmurRzN0RnFZc2lhZFE/preview" width="640" height="385"></iframe>
@endhtmlonly
*/

/*!
@page development Development
@tableofcontents

# Make a new Faunus program

We'll here show three ways to link a new, external program to the Faunus library.

## Using CMake

Start by making a new directory (anywhere you want), put your source file there,
and make a `CMakeLists.txt` file telling CMake about the new executable.
For example:

    $ cd $HOME/newproject
    $ cat hello.cpp

    #include <faunus/faunus.h>
    int main() {
      Faunus::Point a(0,0,0);
    }

    $ echo 'fau_example(hello "./" hello.cpp)' > CMakeLists.txt

Return to the main faunus directory and rerun `cmake` with the following command:

    $ cd $HOME/faunus
    $ cmake . -DMYPLAYGROUND=$HOME/newproject  # absolute path!

That's it! A `Makefile` for your new target, `hello`, has been generated and you can compile
directly from the `newproject` directory:

    $ cd $HOME/newproject
    $ make

Note that all options selected when configuring faunus will be applied to `hello` as well,
and any changes to the faunus code base will trigger re-compilation upon running `make`.


## Using CMake and automatic faunus download

Here we unleash CMake magic to automatically *download and build faunus*, as well as link it
to your program. Only two files are required:

-# Your source file, for example `hello.cpp` as above.
-# This `CMakeLists.txt` file:

       if (PROJECT_NAME MATCHES "Faunus")
         fau_example(hello "./" hello.cpp)
       else()
         cmake_minimum_required(VERSION 2.8)
         include(ExternalProject)
         ExternalProject_Add(faunus
           GIT_REPOSITORY https://github.com/mlund/faunus
           CMAKE_ARGS -DCMAKE_BUILD_TYPE=RelWithDebInfo -DMYPLAYGROUND=${CMAKE_SOURCE_DIR}
           INSTALL_COMMAND "")
       endif() 

Place both in a fresh directory and do:

    $ cmake .
    $ make
    $ make hello


# Quick Class Overview

A good place to start is to understand the following classes. Also, for a more grouped
overview do have a look at the Namespace list.

Class                        | Description
:--------------------------- | :----------------------------------------------
`Move::Propagator`           | Controls Monte Carlo moves
`Analysis::CombinedAnalysis` | Controls analysis to be run during simulation
`AtomData`                   | Defines atom properties
`MoleculeData`               | Defines molecule properties
`Space`                      | Contains all particles, molecules, and geometry
`Group`                      | A range of particles


# Coding Guidelines

## Naming Style

Object                          | Example                     | Comment
:------------------------------ | :-------------------------- | :----------
Types and namespaces            | `class AtomicTranslation;`  | Mixed case starting with upper case
Member functions, functions     | `double getTemperature();`  | Mixed case starting with lower case
Public variables (*avoid!*)     | `int numberOfParticles;`    | Mixed case starting with lower case
Private variables               | `int _i;`                   | Underscore prefix 

## Editing code

- Document code using Doxygen tags - the
  [Markdown](http://www.stack.nl/~dimitri/doxygen/markdown.html) syntax is recommended.
- Set your editor to use a *white space* indentation of *two*.
  - VIM: add the following to `.vimrc`:
  ~~~
  set expandtab
  set shiftwidth=4
  set softtabstop=4
  ~~~

## Design

Some books on C++ design,

- [C++ Coding Standards](http://en.wikipedia.org/wiki/Special:BookSources/0321113586)
  by Sutter and Alexandrescu as well as
- [Effective C++](http://en.wikipedia.org/wiki/Special:BookSources/0321334876)
  by Meyers.

A few basic tips,

- Generously use C++'s [assert()](http://www.cplusplus.com/reference/clibrary/cassert/assert)
  command to ease debugging
- Recycle code with polymorphic designs
- Use compile-time polymophism (templates) for speed limiting steps
- Use STL and Eigen where possible
- Hide data and functions as much as possible (i.e. make them private)
- Stride for [const-correctness](http://en.wikipedia.org/wiki/Const-correctness)
- Treat compiler warnings as errors

## Committing code

To contribute to the Faunus project, first make a *fork* of the
repository and request changes to be added via a *pull request*.
Further instructions can be found on GitHub:

- [Forking a repository](http://help.github.com/articles/fork-a-repo)
- [Pull requests](http://help.github.com/articles/using-pull-requests)

Before submitting changes, please make sure nothing is broken:

    $ make all
    $ make manual
    $ make test
*/

/*!
@page examples Examples
@tableofcontents

- @subpage example_minimal 
- @subpage example_keesom
- @subpage example_bulk 
- @subpage example_grand 
- @subpage example_GCMolecular
- @subpage example_water2
- @subpage example_polymers
- @subpage example_temper   
- @subpage example_penalty
- @subpage example_slitpolymer
- @subpage example_membrane
- @subpage example_cigars2fibrils
- @subpage example_stripes
*/

@page license License
@verbinclude LICENSE
*/
}
